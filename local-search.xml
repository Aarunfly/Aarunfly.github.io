<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>盘EventBus</title>
    <link href="/2022/09/01/js%E6%89%8B%E5%86%99/EvenBus/"/>
    <url>/2022/09/01/js%E6%89%8B%E5%86%99/EvenBus/</url>
    
    <content type="html"><![CDATA[<p>事件的订阅和发布</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventBus</span></span>&#123;<br>    <span class="hljs-keyword">constructor</span>()&#123;<br><br>        <span class="hljs-keyword">this</span>.eventObj = &#123;&#125;;<span class="hljs-comment">//存储所有订阅事件</span><br>        <span class="hljs-keyword">this</span>.callbackId = <span class="hljs-number">0</span>;<span class="hljs-comment">//每个函数的id</span><br>    &#125;<br>    <span class="hljs-comment">//事件订阅</span><br>    $on(name,callback) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.eventObj[name]) &#123; <span class="hljs-comment">//CHJH/如果当前事件队列里没有该事件新增一个</span><br>            <span class="hljs-keyword">this</span>.eventObj[name] = &#123;&#125;;<br>        &#125;<br>        <span class="hljs-keyword">const</span> id = <span class="hljs-keyword">this</span>.callbackId++; <span class="hljs-comment">//设置当前id并预制下一个id</span><br>        <span class="hljs-keyword">this</span>.eventObj[name][id] = callback;<span class="hljs-comment">//存储当前回调到订阅队列里</span><br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-comment">//事件发布,</span><br>    $emit(name,...args) &#123;<br>      <span class="hljs-keyword">const</span> eventList = <span class="hljs-keyword">this</span>.eventObj[name]  <span class="hljs-comment">//获取订阅事件队列</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> id <span class="hljs-keyword">in</span> eventList) &#123; <span class="hljs-comment">//循环订阅队列并执行</span><br>            eventList[id](...args);<br>            <span class="hljs-keyword">if</span> (id.indexOf(<span class="hljs-string">&#x27;D&#x27;</span>) == -<span class="hljs-number">1</span>) &#123; <span class="hljs-comment">//识别当前订阅事件是否为一次订阅如果是即删除</span><br>                delete <span class="hljs-keyword">this</span>.eventList[id];<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//取消事件</span><br>    $off(name,id) &#123;<br>        delete <span class="hljs-keyword">this</span>.eventObj[name][id];  <span class="hljs-comment">//直接删除订阅队列中的的事件</span><br>        console.info(`id为$&#123;id&#125;的事件已被取消订阅`)<br>        <span class="hljs-keyword">if</span> (!Object.keys(<span class="hljs-keyword">this</span>.eventObj[name]).length) &#123; <span class="hljs-comment">//如果当前事件队列为空删除整个队列</span><br>            delete <span class="hljs-keyword">this</span>.eventObj[name];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//只订阅一次</span><br>    $once(name,callback) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.eventObj[name]) &#123; <span class="hljs-comment">//当前订阅队列不存在创建订阅队列</span><br>            <span class="hljs-keyword">this</span>.eventObj[name] = &#123;&#125;;<br>        &#125;<br>        <span class="hljs-keyword">const</span> id = <span class="hljs-string">&#x27;D&#x27;</span> + <span class="hljs-keyword">this</span>.callbackId++;<span class="hljs-comment">//获取事件id并标识</span><br>        <span class="hljs-keyword">this</span>.eventObj[name][id] = callback;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//初始化EventBus</span><br>let EB = new EventBus();<br>EB.$on(<span class="hljs-string">&#x27;key1&#x27;</span>, (name,age) =&gt; &#123;<br>   console.log(<span class="hljs-string">&#x27;我是事件1&#x27;</span>, name,age)<br>&#125;)<br>EB.$on(<span class="hljs-string">&#x27;key2&#x27;</span>, (name) =&gt; &#123;<br>    console.log(<span class="hljs-string">&#x27;我是事件2&#x27;</span>,name)<br>&#125;)<br>EB.$on(<span class="hljs-string">&#x27;key3&#x27;</span>, (name) =&gt; &#123;<br>    console.log(<span class="hljs-string">&#x27;我是事件3&#x27;</span>,name)<br>&#125;)<br>EB.$emit(<span class="hljs-string">&#x27;key1&#x27;</span>,<span class="hljs-string">&#x27;dengdeng&#x27;</span>,<span class="hljs-number">26</span>);<span class="hljs-comment">//我是事件1 dengdeng 26</span><br>EB.$emit(<span class="hljs-string">&#x27;key2&#x27;</span>, <span class="hljs-string">&#x27;dengdeng&#x27;</span>);<span class="hljs-comment">//我是事件2 dengdeng</span><br>EB.$off(<span class="hljs-string">&#x27;key3&#x27;</span>,<span class="hljs-number">2</span>);<br>EB.$emit(<span class="hljs-string">&#x27;key2&#x27;</span>, <span class="hljs-string">&#x27;dengdeng&#x27;</span>);<span class="hljs-comment">//我是事件2 dengdeng</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>js手写</category>
      
    </categories>
    
    
    <tags>
      
      <tag>手写</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git连接github超时以及缓慢</title>
    <link href="/2022/08/19/%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <url>/2022/08/19/%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<p>由于今天改动完提交git代码时老是请求超时，开了梯子也不行于是找了一个方法完美解决顺便记录下<br>ping github.com<br>PING github.com (192.30.253.112): 56 data bytes<br>64 bytes from 192.30.253.112: icmp_seq&#x3D;0 ttl&#x3D;47 time&#x3D;245.930 ms<br>64 bytes from 192.30.253.112: icmp_seq&#x3D;1 ttl&#x3D;47 time&#x3D;245.910 ms<br>记录ip 192.30.253.112</p><p>得到ip 在host中添加即可<br>$ sudo vim&#x2F;etc&#x2F;hosts<br>192.30.253.112 github.com<br>151.101.113.194 github.global.ssl.fastly.net</p><p>　最后更新DNS缓存</p><p>$ sudo dscacheutil -flushcache</p>]]></content>
    
    
    <categories>
      
      <category>问题汇总</category>
      
    </categories>
    
    
    <tags>
      
      <tag>问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>header字段</title>
    <link href="/2022/08/02/%E7%BD%91%E7%BB%9C/header%E5%90%84%E4%B8%AA%E5%AD%97%E6%AE%B5/"/>
    <url>/2022/08/02/%E7%BD%91%E7%BB%9C/header%E5%90%84%E4%B8%AA%E5%AD%97%E6%AE%B5/</url>
    
    <content type="html"><![CDATA[<p>Accept             客户端-&gt;服务端    客户端期望服务器返回的媒体格式<br>Accept-Charset     客户端-&gt;服务端   客户端期望服务器返回的内容的编码格式<br>Content-Type       服务端-&gt;客户端    代表内容的媒体类型和编码格式<br>Accept-Language    客户端-&gt;服务端    返回的语言<br>Content-Language   服务端-&gt;客户端    告知客户端返回内容的语言<br>Content-Length     服务端-&gt;客户端    告知客户端返回内容的长度   get请求没有body所以没有<br>Expires            服务端-&gt;客户端     服务器使用Expect头来告知对方资源何时失效。如果它的值等于Date头的值，就表示资源已经实效   Expires: Thu, 01 Dec 1994 16:00:00 GMT<br>ETag               资源标签     一般用来和If-Match和If-None-Match配合使用，用来判断缓存资源的有效性<br>If-Match           值一般是上面提到的ETag的值<br>If-None-Match      类似于If-Match，只是条件相反<br>Connection         当客户端和服务器需要协商连接的属性时，可以使用Connection头部。比较常用的一个值是close，用来通知对方在当前请求结束后关闭连接。<br>Host               RFC协议规定所有的HTTP请求必须携带Host头，即使Host没有值，也必须带上这个Host头附加一个空串，如果不满足，应用服务器应该抛出400 Bad Request<br>Last-Modified      标记资源的最近修改时间，它和Date比较类似，区别是Last-Modified代表修改时间，而Date是创建时间。<br>If-Modified-Since  浏览器向服务器请求静态资源时，如果浏览器本地已经有了缓存，就会携带If-Modified-Since头，值为资源的Last-Modified时间，询问服务器该资源自从这个Last-Modified时间之后有没有被修改。如果没有修改过，就会向浏览器返回304 Not Modified通知浏览器可以放心使用缓存内的资源。如果资源修改过，那就像正常的GET请求一样，携带资源的内容返回200 OK。<br>Range              支持断点续传的服务器必须处理Range头，它表示客户端请求资源的一部分时指定的请求字节范围。它是客户端向服务器发送的请求头。     Range: bytes&#x3D;500-999<br>Transfer-Encoding  传送Body信息时需要对Body数据采取何种变换。当HTTP对Body进行分块传送时，需要增加下面的头部信息才可以进行分块传送。其它类型目前没有遇到过。<br>Referer            Referer是非常常用的头，它表示请求的发起来源URI，也就是当前页面资源的父页面</p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>http</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>已知状态码</title>
    <link href="/2022/07/16/%E7%BD%91%E7%BB%9C/status%20code/"/>
    <url>/2022/07/16/%E7%BD%91%E7%BB%9C/status%20code/</url>
    
    <content type="html"><![CDATA[<h1 id="1XX"><a href="#1XX" class="headerlink" title="1XX"></a>1XX</h1><h2 id="资源正在请求中"><a href="#资源正在请求中" class="headerlink" title="资源正在请求中"></a>资源正在请求中</h2><h1 id="2XX"><a href="#2XX" class="headerlink" title="2XX"></a>2XX</h1><h2 id="200-资源请求成功"><a href="#200-资源请求成功" class="headerlink" title="200 资源请求成功"></a>200 资源请求成功</h2><h2 id="204-资源请求成功但无资源返回"><a href="#204-资源请求成功但无资源返回" class="headerlink" title="204 资源请求成功但无资源返回"></a>204 资源请求成功但无资源返回</h2><h1 id="3XX"><a href="#3XX" class="headerlink" title="3XX"></a>3XX</h1><h2 id="301-永久重定向"><a href="#301-永久重定向" class="headerlink" title="301 永久重定向"></a>301 永久重定向</h2><h2 id="302-临时重定向"><a href="#302-临时重定向" class="headerlink" title="302 临时重定向"></a>302 临时重定向</h2><h2 id="304-协商缓存"><a href="#304-协商缓存" class="headerlink" title="304 协商缓存"></a>304 协商缓存</h2><h1 id="4XX"><a href="#4XX" class="headerlink" title="4XX"></a>4XX</h1><h1 id="400-服务端无法解析http请求语法"><a href="#400-服务端无法解析http请求语法" class="headerlink" title="400 服务端无法解析http请求语法"></a>400 服务端无法解析http请求语法</h1><h1 id="401-未授权-需要验证身份"><a href="#401-未授权-需要验证身份" class="headerlink" title="401 未授权 需要验证身份"></a>401 未授权 需要验证身份</h1><h1 id="403-服务器拒接访问"><a href="#403-服务器拒接访问" class="headerlink" title="403 服务器拒接访问"></a>403 服务器拒接访问</h1><h1 id="404-页面资源未找到（一般路由配置出现）"><a href="#404-页面资源未找到（一般路由配置出现）" class="headerlink" title="404 页面资源未找到（一般路由配置出现）"></a>404 页面资源未找到（一般路由配置出现）</h1><h1 id="5XX"><a href="#5XX" class="headerlink" title="5XX"></a>5XX</h1><h1 id="500-服务器内部错误"><a href="#500-服务器内部错误" class="headerlink" title="500 服务器内部错误"></a>500 服务器内部错误</h1><h1 id="503-服务器无法使用-或者挂了"><a href="#503-服务器无法使用-或者挂了" class="headerlink" title="503 服务器无法使用 或者挂了"></a>503 服务器无法使用 或者挂了</h1>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>http</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>http 1.0/1.1/2</title>
    <link href="/2022/07/14/%E7%BD%91%E7%BB%9C/http/"/>
    <url>/2022/07/14/%E7%BD%91%E7%BB%9C/http/</url>
    
    <content type="html"><![CDATA[<h1 id="1-0"><a href="#1-0" class="headerlink" title="1.0"></a>1.0</h1><h2 id="短链接"><a href="#短链接" class="headerlink" title="短链接"></a>短链接</h2><h2 id="无host"><a href="#无host" class="headerlink" title="无host"></a>无host</h2><h2 id="断电无法重连"><a href="#断电无法重连" class="headerlink" title="断电无法重连"></a>断电无法重连</h2><h1 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h1><h2 id="增加缓存"><a href="#增加缓存" class="headerlink" title="增加缓存"></a>增加缓存</h2><h2 id="增加host"><a href="#增加host" class="headerlink" title="增加host"></a>增加host</h2><h2 id="增加长连接"><a href="#增加长连接" class="headerlink" title="增加长连接"></a>增加长连接</h2><h2 id="数据包形式传输"><a href="#数据包形式传输" class="headerlink" title="数据包形式传输"></a>数据包形式传输</h2><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><h2 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h2><h2 id="二进制分帧"><a href="#二进制分帧" class="headerlink" title="二进制分帧"></a>二进制分帧</h2><h2 id="头部压缩"><a href="#头部压缩" class="headerlink" title="头部压缩"></a>头部压缩</h2><h2 id="服务端推送（server-push）"><a href="#服务端推送（server-push）" class="headerlink" title="服务端推送（server push）"></a>服务端推送（server push）</h2>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>http</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端路由</title>
    <link href="/2022/06/21/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1/"/>
    <url>/2022/06/21/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1/</url>
    
    <content type="html"><![CDATA[<p>关于前端路由主要分为 Hash 还有就是history 这两种</p><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><p>hash 主要是使用#分割，当页面切换时不会刷新页面<br>onChange是更改他的方法<br>由于切换页面不刷新所以受SPA的青睐设为默认路由</p><p>history 主要是通过配置路由来进行跳转，跳转时页面会发生Http请求，所以比较掉性能，如果没有配置地址则请求失败code返回404（页面不存在）</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>算法小探</title>
    <link href="/2022/06/15/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/"/>
    <url>/2022/06/15/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>安利一波资源 拉布拉多整挺好： <a href="https://labuladong.github.io/algo/1/">https://labuladong.github.io/algo/1/</a></p><h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><p>var twoSum &#x3D; function(numbers, target) {<br>let left &#x3D;0, right &#x3D; numbers.length - 1;<br>while(left &lt; right){<br>let sum &#x3D; numbers[left] + numbers[right];<br>if(sum &#x3D;&#x3D; target){<br>return [left+1,right+1];<br>}else if(sum &gt; target){<br>right–;<br>}else if(sum &lt; target){<br>left++;<br>}<br>}<br>return [];<br>};</p><h2 id="统计层数-children-最大深度-dfs"><a href="#统计层数-children-最大深度-dfs" class="headerlink" title="统计层数 children 最大深度 dfs"></a>统计层数 children 最大深度 dfs</h2><p>let a &#x3D;[{<br>id:’1’,<br>children:[{<br>id:’2-1’<br>},{<br>id:’2-2’,<br>children:[{<br>id:’3’,<br>children:[{<br>id:’3’,<br>children:[{<br>id:’3’,<br>children:[{<br>id:’3’,</p><pre><code class="hljs">                       &#125;]                   &#125;]               &#125;]            &#125;]        &#125;]</code></pre><p>},{ id:’1’,<br>children:[{id:’2-1’}]<br>}];</p><p>function getDeep(arr){<br> let res &#x3D; 0;<br>let deep &#x3D; 0;<br>const dfs &#x3D; (arr) &#x3D;&gt; {<br>arr.forEach(item &#x3D;&gt; {<br>if (item.children &amp;&amp; item.children.length &gt; 0) {<br>deep++<br>dfs(item.children);<br>deep–<br>} else {<br>res &#x3D; Math.max(res,deep)<br>}<br>});<br>}<br>dfs(arr);<br>console.log(res);<br>return res;<br>}</p><p>getDeep(a);</p><h2 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h2><p>var permute &#x3D; function(nums) {<br>const res &#x3D; [];<br>const trackSet &#x3D; new Set();</p><pre><code class="hljs">backtrack(nums, trackSet, res);return res;</code></pre><p>};</p><p>function backtrack(nums, trackSet, res){<br>if (trackSet.size &#x3D;&#x3D;&#x3D; nums.length){<br>res.push([…trackSet]);<br>return ;<br>}</p><pre><code class="hljs">for (let i = 0; i &lt; nums.length; i++)&#123;    if (trackSet.has(nums[i]))&#123;        continue;    &#125;    trackSet.add(nums[i]);    backtrack(nums, trackSet, res);    trackSet.delete(nums[i]);&#125;</code></pre><p>}</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>功能说明</title>
    <link href="/2022/06/14/%E5%BB%BA%E7%AB%99%E8%AF%B4%E6%98%8E/"/>
    <url>/2022/06/14/%E5%BB%BA%E7%AB%99%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<p>此次建站主要是因为云服务器到期以及域名释放，为跟随公司降本增效策略，三思后决定使用 github page 来搭建我的记录平台</p><!-- ## Quick Start --><!-- ### Create a new post --><!-- ``` bash$ hexo new "My New Post"<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>More info: [Writing](https:<span class="hljs-regexp">//</span>hexo.io<span class="hljs-regexp">/docs/</span>writing.html)<br><br><span class="hljs-comment">### Run server</span><br><br>``` bash<br>$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a> –&gt;</p>]]></content>
    
    
    <categories>
      
      <category>说明</category>
      
    </categories>
    
    
    <tags>
      
      <tag>说明</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写记录</title>
    <link href="/2022/06/14/js%E6%89%8B%E5%86%99/js%E6%89%8B%E5%86%99%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/06/14/js%E6%89%8B%E5%86%99/js%E6%89%8B%E5%86%99%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="从理解到落地"><a href="#从理解到落地" class="headerlink" title="从理解到落地"></a>从理解到落地</h1><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs processing">function <span class="hljs-title function_">deepClone</span>(obj,<span class="hljs-built_in">map</span> = <span class="hljs-keyword">new </span><span class="hljs-class title_">Map</span>())&#123;<br><span class="hljs-comment">//typeof（只能检测原始值） 检测原始值返回</span><br><span class="hljs-keyword">if</span>(typeof obj !== <span class="hljs-string">&#x27;Object&#x27;</span> )&#123;<br><span class="hljs-keyword">return</span> obj;<br>&#125;<br><br><span class="hljs-comment">//map（key 可以为对象特点）防止自己对自己属性赋值导致无限递归</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>.<span class="hljs-property">get</span>(obj))&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">map</span>.<span class="hljs-property">get</span>(obj);<br>&#125;<br><br>let result = &#123;&#125;;<br><span class="hljs-comment">//判断是否为数组方法 Array.isArray()、Object.protoutype.toString.calll() === &#x27;[Object array]&#x27;、 不能使用 instanceof 来检测数组 （不严谨）</span><br><span class="hljs-keyword">if</span>(<br><span class="hljs-built_in">Array</span>.<span class="hljs-property">isArray</span>(obj) ||<br><span class="hljs-built_in">Object</span>.<span class="hljs-property">protoutype</span>.<span class="hljs-property">toString</span>.<span class="hljs-property">call</span>(obj) === <span class="hljs-string">&quot;[Object array]&quot;</span><br>)&#123;<br>result = []<br>&#125;<br><br><span class="hljs-built_in">map</span>.<span class="hljs-property">set</span>(result,obj)<br><br><span class="hljs-comment">// 核心递归</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> <span class="hljs-built_in">key</span> in obj)&#123;<br><span class="hljs-comment">// hasOwnProperty() 查看该属性是否在此对象中</span><br><span class="hljs-keyword">if</span>(obj.<span class="hljs-property">hasOwnProperty</span>(<span class="hljs-built_in">key</span>))&#123;<br>result[<span class="hljs-built_in">key</span>] = <span class="hljs-title function_">deepClone</span>(obj[<span class="hljs-built_in">key</span>])<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数组拍平"><a href="#数组拍平" class="headerlink" title="数组拍平"></a>数组拍平</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">falt</span>(<span class="hljs-params">arr,deep = <span class="hljs-number">1</span></span>)&#123;<br><span class="hljs-keyword">if</span>(deep&gt;<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">return</span> arr.<span class="hljs-built_in">reduce</span>(<span class="hljs-function">(<span class="hljs-params">per,cur</span>)=&gt;</span>&#123;<br><span class="hljs-keyword">return</span> per.concat(<span class="hljs-built_in">Array</span>.isArray(cur)?falt(cur):cur)<br>&#125;,[])<br>&#125;<br><span class="hljs-keyword">return</span> arr.<span class="hljs-built_in">slice</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">uniqueArray</span>(<span class="hljs-params">arr</span>)&#123;<br><span class="hljs-keyword">let</span> slow = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">let</span> fast = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">let</span> result = [];<br><span class="hljs-title function_">whlie</span>(<span class="hljs-params">fast &lt; arr.length</span>)&#123;<br><span class="hljs-keyword">if</span>(arr[slow] == arr[fast])&#123;<br>fast++;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>slow++;<br>arr[slow] = arr[fast];<br>result.<span class="hljs-title function_">push</span>(arr[fast])<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> result;<span class="hljs-comment">//去重数组</span><br><span class="hljs-keyword">return</span> slow+<span class="hljs-number">1</span>；<span class="hljs-comment">//不重复元素个数</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数据双向绑定"><a href="#数据双向绑定" class="headerlink" title="数据双向绑定"></a>数据双向绑定</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;&#125;;<br><span class="hljs-keyword">let</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;input&#x27;</span>);<br><span class="hljs-keyword">let</span> span = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;span&#x27;</span>);<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj,<span class="hljs-string">&#x27;text&#x27;</span>,&#123;<br><span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;数据获取了&#x27;</span>）<br>&#125;<br><span class="hljs-title function_">set</span>(<span class="hljs-params">newVal</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;数据更新了&#x27;</span>)<br>input.<span class="hljs-property">value</span> = newVal;<br>span.<span class="hljs-property">innerHTML</span> =newVal;<br>&#125;<br>&#125;)<br>input.<span class="hljs-title function_">addEvenLisener</span>(<span class="hljs-string">&#x27;keyup&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">e</span>)=&gt;</span>&#123;<br>obj.<span class="hljs-property">text</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="reduce-求和"><a href="#reduce-求和" class="headerlink" title="reduce 求和"></a>reduce 求和</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">arr</span>)&#123;<br><span class="hljs-keyword">return</span> arr.<span class="hljs-built_in">reduce</span>(<span class="hljs-function">(<span class="hljs-params">per,cur</span>)=&gt;</span>&#123;<br><span class="hljs-keyword">return</span> per+cur<br>&#125;,<span class="hljs-number">0</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="将-js-对象转化成树形结构"><a href="#将-js-对象转化成树形结构" class="headerlink" title="将 js 对象转化成树形结构"></a>将 js 对象转化成树形结构</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs xquery">const arr = [&#123;<span class="hljs-built_in"></span><br><span class="hljs-built_in">name</span>:<span class="hljs-string">&#x27;中国&#x27;</span>,<span class="hljs-built_in"></span><br><span class="hljs-built_in">id</span>:<span class="hljs-number">1</span>,<br>parentId:<span class="hljs-number">0</span><br>&#125;,&#123;<span class="hljs-built_in"></span><br><span class="hljs-built_in">name</span>:<span class="hljs-string">&#x27;北京&#x27;</span>,<span class="hljs-built_in"></span><br><span class="hljs-built_in">id</span>:<span class="hljs-number">2</span>,<br>parentId:<span class="hljs-number">1</span><br>&#125;,&#123;<span class="hljs-built_in"></span><br><span class="hljs-built_in">name</span>:<span class="hljs-string">&#x27;上海&#x27;</span>,<span class="hljs-built_in"></span><br><span class="hljs-built_in">id</span>:<span class="hljs-number">3</span>,<br>parentId:<span class="hljs-number">1</span><br>&#125;,&#123;<span class="hljs-built_in"></span><br><span class="hljs-built_in">name</span>:<span class="hljs-string">&#x27;台湾&#x27;</span>,<span class="hljs-built_in"></span><br><span class="hljs-built_in">id</span>:<span class="hljs-number">4</span>,<br>parentId:<span class="hljs-number">1</span><br>&#125;,&#123;<span class="hljs-built_in"></span><br><span class="hljs-built_in">name</span>:<span class="hljs-string">&#x27;钓鱼岛&#x27;</span>,<span class="hljs-built_in"></span><br><span class="hljs-built_in">id</span>:<span class="hljs-number">5</span>,<br>parentId:<span class="hljs-number">4</span><br>&#125;]<br><br><span class="hljs-keyword">function</span> toTree(data<span class="hljs-built_in">,key</span> = <span class="hljs-string">&#x27;id&#x27;</span>,parentId = <span class="hljs-number">0</span>)&#123;<br>//边界值判断 非数组返回<br><span class="hljs-keyword">if</span>(!Array.isArray(data))&#123;<br><span class="hljs-keyword">return</span> data<br>&#125;<br><br>//边界值判断 数组元素为 <span class="hljs-number">1</span> 返回<br><span class="hljs-keyword">if</span>(data.length == <span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">return</span> data;<br>&#125;<br><br><span class="hljs-keyword">let</span> result = [];<br>循环整个数组需找<br>date.forEach((<span class="hljs-type">item</span>)=&gt;&#123;<br>//符合条件 当循环 <span class="hljs-type">item</span> 的<span class="hljs-built_in"> id</span> 符合于当层 parentId 进入下一层递归<br><span class="hljs-keyword">if</span>(<span class="hljs-type">item</span><span class="hljs-built_in">.id</span> == parentId)&#123;<br>//符合条件给当前 <span class="hljs-type">item</span> 增加一属性 children 并递归赋值，第三个参数是下一层需要寻找的<span class="hljs-built_in"> id</span> 值<br><span class="hljs-type">item</span>.children = toTree(data<span class="hljs-built_in">,key</span>,<span class="hljs-type">item</span><span class="hljs-built_in">[key</span>])<br>result.push(<span class="hljs-type">item</span>)<br>&#125;<br>&#125;)<br><span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="setTimeout-模拟-setInterval"><a href="#setTimeout-模拟-setInterval" class="headerlink" title="setTimeout 模拟 setInterval"></a>setTimeout 模拟 setInterval</h2><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs zephir"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mySetInterval</span><span class="hljs-params">(fn,time)</span></span>&#123;<br><span class="hljs-keyword">let</span> timer = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">const</span> interval = ()=&gt;&#123;<br>trimer = setTimeout(()=&gt;&#123;<br><span class="hljs-function"><span class="hljs-keyword">fn</span><span class="hljs-params">()</span></span>;<br>interval();<br>&#125;,time)<br>&#125;<br>interval();<br><span class="hljs-keyword">return</span> ()=&gt;clearTimeOut(timer)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="let-str-x3D-‘aabbcdadeef’-output-3a2b1c2d3e1f"><a href="#let-str-x3D-‘aabbcdadeef’-output-3a2b1c2d3e1f" class="headerlink" title="let str &#x3D; ‘aabbcdadeef’; output: 3a2b1c2d3e1f ;"></a>let str &#x3D; ‘aabbcdadeef’; output: 3a2b1c2d3e1f ;</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-keyword">function</span> demo(str,<span class="hljs-keyword">map</span> = new Map())&#123;<br><span class="hljs-keyword">let</span> arr = str.split(<span class="hljs-string">&#x27;&#x27;</span>);<br><br>       <span class="hljs-keyword">let</span> resultStr = <span class="hljs-string">&#x27;&#x27;</span>;<br>    arr.forEach((<span class="hljs-type">item</span>, index) =&gt; &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">map</span>.get(<span class="hljs-type">item</span>)) &#123;<br><br>            <span class="hljs-keyword">let</span> num = <span class="hljs-keyword">map</span>.get(<span class="hljs-type">item</span>) + <span class="hljs-number">1</span>;<br><br>            <span class="hljs-keyword">map</span>.set(<span class="hljs-type">item</span>,num)<br><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br><br>             <span class="hljs-keyword">map</span>.set(<span class="hljs-type">item</span>,<span class="hljs-number">1</span>)<br>          &#125;<br><br>    &#125;);<br><br><br>    <span class="hljs-keyword">map</span>.forEach((<span class="hljs-type">item</span><span class="hljs-built_in">,key</span>) =&gt; &#123;<br><br>        resultStr += <span class="hljs-type">item</span> + <span class="hljs-string">&#x27;&#x27;</span> +<span class="hljs-built_in"> key</span>;<br>    &#125;)<br>    console.log(resultStr);<br><br><span class="hljs-keyword">return</span> resultStr;<br>&#125;<br>demo(str);<br></code></pre></td></tr></table></figure><h2 id="JS-实现一个带并发限制的异度调度器-Scheduler，保证同时运行的任务最多有两个。完善下面代码中的-Scheduler-类，使得以下程序能正确输出。"><a href="#JS-实现一个带并发限制的异度调度器-Scheduler，保证同时运行的任务最多有两个。完善下面代码中的-Scheduler-类，使得以下程序能正确输出。" class="headerlink" title="JS 实现一个带并发限制的异度调度器 Scheduler，保证同时运行的任务最多有两个。完善下面代码中的 Scheduler 类，使得以下程序能正确输出。"></a>JS 实现一个带并发限制的异度调度器 Scheduler，保证同时运行的任务最多有两个。完善下面代码中的 Scheduler 类，使得以下程序能正确输出。</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Scheduler</span> &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">waitTasks</span> = [];<span class="hljs-comment">//代执行队列</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">runingTasks</span> = [];<span class="hljs-comment">//正在执行队列</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">maxNum</span> = <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-title function_">add</span>(<span class="hljs-params">promiseMaker</span>) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">runingTasks</span>.<span class="hljs-property">length</span> &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">maxNum</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">run</span>(promiseMaker)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">waitTasks</span>.<span class="hljs-title function_">push</span>(promiseMaker);<br>&#125;<br>&#125;<br><br>    <span class="hljs-title function_">run</span>(<span class="hljs-params">promiseMaker</span>) &#123;<br>        <span class="hljs-keyword">const</span> len = <span class="hljs-variable language_">this</span>.<span class="hljs-property">runingTasks</span>.<span class="hljs-title function_">push</span>(promiseMaker);<br>        <span class="hljs-keyword">const</span> index = len - <span class="hljs-number">1</span>;<br>        <span class="hljs-title function_">promiseMaker</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">runingTasks</span>.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">waitTasks</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">run</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">waitTasks</span>.<span class="hljs-title function_">shift</span>());<br>            &#125;<br>        &#125;)<br>    &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">timeout</span> = (<span class="hljs-params">time</span>) =&gt;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(resolve, time);<br>    &#125;);<br><br>    <span class="hljs-keyword">const</span> scheduler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scheduler</span>();<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">addTask</span> = (<span class="hljs-params">time, order</span>) =&gt; &#123;<br>    scheduler.<span class="hljs-title function_">add</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">timeout</span>(time).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(order)));<br>    &#125;;<br><br>    <span class="hljs-title function_">addTask</span>(<span class="hljs-number">1000</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>    <span class="hljs-title function_">addTask</span>(<span class="hljs-number">500</span>, <span class="hljs-string">&quot;2&quot;</span>);<br>    <span class="hljs-title function_">addTask</span>(<span class="hljs-number">300</span>, <span class="hljs-string">&quot;3&quot;</span>);<br>    <span class="hljs-title function_">addTask</span>(<span class="hljs-number">400</span>, <span class="hljs-string">&quot;4&quot;</span>);<br>    <span class="hljs-comment">// output：2 3 1 4</span><br>    <span class="hljs-comment">// 一开始，1，2 两个任务进入队列。</span><br>    <span class="hljs-comment">// 500ms 时，2 完成，输出 2，任务 3 入队。</span><br>    <span class="hljs-comment">// 800ms 时，3 完成，输出 3，任务 4 入队。</span><br>    <span class="hljs-comment">// 1000ms 时，1 完成，输出 1。</span><br></code></pre></td></tr></table></figure><h2 id="手写-reduce"><a href="#手写-reduce" class="headerlink" title="手写 reduce"></a>手写 reduce</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-property">protoutype</span>.<span class="hljs-property">myReduce</span>= <span class="hljs-title function_">functio</span>(<span class="hljs-params">cb,value</span>)&#123;<br><span class="hljs-keyword">let</span> arr = <span class="hljs-variable language_">this</span>;<br><span class="hljs-keyword">let</span> total = value || arr[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = value?<span class="hljs-number">0</span>:<span class="hljs-number">1</span>;i &lt; arr.<span class="hljs-property">length</span>; i++)&#123;<br>total = <span class="hljs-title function_">cb</span>(total,arr[i],i,arr);<br>&#125;<br><span class="hljs-keyword">return</span> total;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="手写-bind"><a href="#手写-bind" class="headerlink" title="手写 bind"></a>手写 bind</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">Function.prototype.myBind(ctx,...bindArgs)&#123;<br>    let that = <span class="hljs-keyword">this</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span><span class="hljs-params">(<span class="hljs-rest_arg">...args</span>)</span>&#123;<br>       <span class="hljs-keyword">return</span> that.apply(ctx,bindArgs.concat(args))<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="手写-call"><a href="#手写-call" class="headerlink" title="手写 call"></a>手写 call</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs maxima">Function.prototype.myCall(ctx,...<span class="hljs-built_in">args</span>)&#123;<br><span class="hljs-built_in">let</span> fn = symbol();<br><span class="hljs-built_in">let</span> <span class="hljs-built_in">context</span> = ctx?Object(ctx):window;<br><span class="hljs-built_in">context</span>.fn = this;<br><span class="hljs-built_in">let</span> res =<span class="hljs-built_in">args</span>.<span class="hljs-built_in">length</span>?<span class="hljs-built_in">context</span>.fn(...<span class="hljs-built_in">args</span>):<span class="hljs-built_in">context</span>.fn();//判断有没有传参<br><span class="hljs-built_in">delete</span> <span class="hljs-built_in">context</span>.fn;<br><span class="hljs-built_in">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="手写-apply"><a href="#手写-apply" class="headerlink" title="手写 apply"></a>手写 apply</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">myApply</span>(<span class="hljs-params">ctx,...args</span>)&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(args))&#123;<br>   <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27; apply need Array&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">let</span> fn = <span class="hljs-title function_">symbol</span>();<br><span class="hljs-keyword">let</span> context = ctx?<span class="hljs-title class_">Object</span>(ctx):<span class="hljs-variable language_">window</span>;<br>context.<span class="hljs-property">fn</span> = <span class="hljs-variable language_">this</span>;<br><span class="hljs-keyword">let</span> res =args.<span class="hljs-property">length</span>?context.<span class="hljs-title function_">fn</span>(...args):context.<span class="hljs-title function_">fn</span>();<span class="hljs-comment">//判断有没有传参</span><br><span class="hljs-keyword">delete</span> context.<span class="hljs-property">fn</span>;<br><span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>js手写</category>
      
    </categories>
    
    
    <tags>
      
      <tag>手写</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
